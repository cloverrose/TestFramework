TestFramework

概要
Javaで文字列ベースのテストを行うモジュール
指定されたパッケージの下にある*.classファイルを取得し
リフレクションを利用して、そのクラスのテストメソッドを自動的に呼び出します。

変更履歴
2012-04-02
OS依存度が高かったパッケージ下のクラスファイル名の取得を大幅に変更し、OS非依存にした
その結果、クラスファイル名の取得がリフレクションを利用しなくなったため、
一連のメソッド群をReflectionHelperからTestFrameworkに移動
また、結果としてクラスパスにtool.jarを追加する必要がなくなった



ファイルについて
cloverrose直下に２つのディレクトリsampleとtestframeworkがあります。
sample以下のファイルはデモ用に作ったものです。
testframework以下のファイルがコアです。

TestFramework.javaがメインのクラス
ReflectionHelper.javaはTestFrameworkクラス内で
必要になるリフレクションを委譲したクラスです
Tester.javaは継承して実際にテストを記述するクラスです

デモによる使い方
テストの追加と一時中止にかかるコストを極力減らすために、
新しいテストクラスを追加した時に必要な記述はテスト本体である
makeInputString(),makeOututString(),mainWork()以外は
makeInstance()だけです。これはインスタンスを作って返すという１行で済みます。
cloverrose.sample.testframework.concrete.FiveTester.javaを見てください。

テストを呼び出すためには、パッケージの設定をして
テストメソッドを呼び出すだけです。
cloverrose.sample.testframework.Main.javaを見てください。

ライブラリとしての使い方
自分はEclipseでtestframework.jarというようにJarファイルを作って
他のプロジェクトのBuildPathに追加して使ってます。

効率的なテストの作成
同じ処理に入力を変更していくつかテストしたい時は
mainWorkメソッドだけを実装した抽象クラスを作る
（具象テストクラスとは違うパッケージに配置すること！！）
そのクラスを継承したクラスで入力と出力のペアを記述。
